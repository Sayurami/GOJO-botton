// modern cinesubzt command with button UI
const { cmd } = require('../lib/command');
const axios = require('axios');
const config = require('../settings');

const BRAND = 'üçø CineSubz Sinhala Movie Bot';
const cache = new Map();
let connRef = null;

cmd({
  pattern: "cinesubzt",
  alias: ["cine"],
  desc: "Search & download Sinhala Movies from cinesubz",
  react: "üé•",
  category: "media",
  filename: __filename,
}, async (conn, mek, m, { from, args, reply }) => {
  try {
    connRef = conn;
    const query = args.join(" ").trim();
    if (!query) {
      await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
      return reply("*üé¨ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!*");
    }

    await conn.sendMessage(from, { react: { text: "üîç", key: mek.key } });

    const res = await axios.get(`https://darkyasiya-new-movie-api.vercel.app/api/movie/cinesubz/search?q=${encodeURIComponent(query)}`);
    const movies = res.data?.data?.movies || [];

    if (!movies.length) {
      await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
      return reply("‚ùå ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è.");
    }

    const rows = movies.map((v, i) => ({
      title: v.title.replace(/Sinhala Subtitles? \| ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∑É‡∂∏‡∂ü/g, '').trim(),
      description: `üé• Source: cinesubz.lk`,
      rowId: `cine_${i}`
    }));

    cache.set(from, movies);

    const listMsg = {
      text: `*üìΩÔ∏è CineSubz Search Results*\n\n‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.`,
      footer: BRAND,
      title: "üîç ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω",
      buttonText: "üé¨ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±",
      sections: [{ title: "üìÇ Movies", rows }]
    };

    await conn.sendMessage(from, listMsg, { quoted: mek });
    await conn.sendMessage(from, { react: { text: "‚úÖ", key: mek.key } });
  } catch (e) {
    console.error("cine search error:", e);
    await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
    reply("‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
  }
});

// Global message handler (stateless)
if (!global.__cine_list_handler) {
  global.__cine_list_handler = true;

  const { setTimeout } = require('timers');

  function wait() {
    if (!connRef) return setTimeout(wait, 500);

    connRef.ev.on("messages.upsert", async ({ messages }) => {
      const msg = messages?.[0];
      if (!msg?.key || !msg.message) return;

      const sel = msg.message.listResponseMessage?.singleSelectReply?.selectedRowId;
      if (!sel || !sel.startsWith("cine_")) return;

      const chat = msg.key.remoteJid;
      const index = Number(sel.replace("cine_", ""));
      const list = cache.get(chat);

      if (!list || !list[index]) {
        await connRef.sendMessage(chat, { text: "‚ùå Session expired. Please search again." }, { quoted: msg });
        return;
      }

      const info = list[index];
      await connRef.sendMessage(chat, { react: { text: "‚è¨", key: msg.key } });

      try {
        const res = await axios.get(`https://darkyasiya-new-movie-api.vercel.app/api/movie/cinesubz/movie?url=${encodeURIComponent(info.link)}`);
        const data = res.data?.data;

        if (!data) {
          await connRef.sendMessage(chat, { text: "‚ùå Movie not found." }, { quoted: msg });
          return;
        }

        const picks = data.downloadUrl.map((d, i) => ({
          title: `${d.quality} (${d.size})`,
          description: "‚¨áÔ∏è Tap to download",
          rowId: `cineq_${Buffer.from(JSON.stringify({ ...d, title: data.title })).toString("base64")}`
        }));

        const qList = {
          text: `üé¨ *${data.title}*\n\n*Quality ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:*`,
          footer: BRAND,
          title: "üé• Quality Options",
          buttonText: "‚¨áÔ∏è Download",
          sections: [{ title: "Available Qualities", rows: picks }]
        };

        await connRef.sendMessage(chat, qList, { quoted: msg });

      } catch (e) {
        console.error("cine movie fetch error:", e);
        await connRef.sendMessage(chat, { text: "‚ùå Data fetch failed." }, { quoted: msg });
      }
    });

    connRef.ev.on("messages.upsert", async ({ messages }) => {
      const msg = messages?.[0];
      if (!msg?.key || !msg.message) return;

      const sel = msg.message.listResponseMessage?.singleSelectReply?.selectedRowId;
      if (!sel || !sel.startsWith("cineq_")) return;

      const chat = msg.key.remoteJid;
      const raw = Buffer.from(sel.replace("cineq_", ""), "base64").toString();
      const pick = JSON.parse(raw);

      try {
        await connRef.sendMessage(chat, { react: { text: "‚¨á", key: msg.key } });

        const dl = await axios.get(`https://darkyasiya-new-movie-api.vercel.app/api/movie/cinesubz/download?url=${encodeURIComponent(pick.link)}`);
        const link = dl.data?.data?.download?.gdrive || dl.data?.data?.download?.direct;

        if (!link) {
          return connRef.sendMessage(chat, { text: "‚ùå Valid download link not found." }, { quoted: msg });
        }

        const fname = `${pick.title} ‚Ä¢ ${pick.quality}.mp4`;
        await connRef.sendMessage(chat, {
          document: { url: link },
          mimetype: "video/mp4",
          fileName: fname,
          caption: `üì• *Download Completed*\nüé¨ ${pick.title} | ${pick.quality}`
        }, { quoted: msg });

        await connRef.sendMessage(chat, { react: { text: "‚úÖ", key: msg.key } });

      } catch (e) {
        console.error("cine download error:", e);
        await connRef.sendMessage(chat, { text: "‚ùå Failed to send file." }, { quoted: msg });
      }
    });
  }
  wait();
}
